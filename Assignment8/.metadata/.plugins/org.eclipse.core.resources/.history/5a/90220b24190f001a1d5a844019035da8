#include <stdio.h>
#include <stdlib.h>
#include <limits.h>



int algorithm; //the page replacement algorithm the program will use. 0 for FIFO, 1 for LRU, 2 for Optimal
int numberFrames; //the number of frames in physical memory
double lowFreq; //the low frequency of page faults
double highFreq; //the high frequency of page faults
double globalAge = 0; //global counter for the time
int ID = 0;
double pageFault = 0; //counter for page fault
double frequency;
int usedFrames = 0; //number of used frames in physical memory
int * optArray; //array of pages for optimal algorithm
int counter = 0; //counter for the number of pages that have been processed

/*
 * Nodes of the linked list represent memory frames
 */
typedef struct node {
    unsigned int val; //value to be stored in the frame
    int empty; //1 if frame is empty, 0 if frame is occupied
    int ageFifo; //the age of the page in the frame (used for FIFO algorithm)
    int ageLRU; //the age of the page in the frame (used for LRU algorithm)
    int index; //the frame number
    struct node * next; //pointer to next node in the list
    struct node * previous; //pointer to previous node in the list
} node_t;

node_t * head = NULL; //head of the linked list
node_t * tail = NULL; //tail of linked list
int lastIn; //last page inserted to memory
int firstOut; //first page to be replaced in memory

node_t * newNode(){
	node_t * temp = (node_t *)malloc(sizeof(node_t));
	temp->ageFifo = globalAge;
	temp->ageLRU = INT_MAX;
	temp->empty = 1;
	temp->val = 0;
	temp->next = NULL;
	temp->previous = NULL;
	return temp;
}

/*
 * Function initializes linked list pointed to by head with the number of nodes in numberFrames
 */
void initList(){
	int i = 0;
	for(i=0; i<numberFrames; i++){
		node_t * temp = newNode();
		if(head == NULL){
			head = temp;
			tail = temp;
			temp->index = 0;
		}else{
			tail->next = temp;
			temp->previous = tail;
			tail = temp;
			temp->index = ++ID;
		}
	}
}

int checkInMem(unsigned int value){
	node_t *temp = head;
	while(temp != NULL){
		if((temp->val == value)&&(temp->empty == 0)){ //page was found in memory
			temp->ageLRU = globalAge;
			return 1; //success
		}
		temp = temp->next;
	}
	return 0; //page not found
}

/*
 * insert page is only used when pages are inserted consecutively so
 * there is no need to care about the place of insertion
 */
void insertPage(unsigned int value){
	node_t *temp = head;
	while(temp != NULL){
		if(temp->empty == 1){ //empty node
			temp->empty = 0;
			temp->val = value;
			temp->ageFifo = globalAge;
			temp->ageLRU = globalAge;
			usedFrames++;
			return;
		}
		temp = temp->next;
	}
	puts("NOT FOUND");
}

int checkBounds(){
	frequency = (pageFault/globalAge);
	if((frequency <= highFreq)&&(frequency >= lowFreq)){ //PFF within bounds
		return 0;
	}
	if(frequency > highFreq){ //PFF higher than high bound
		return 1;
	}
	if(frequency < lowFreq){ //PFF lower than low bound
		return 2;
	}
	return -1;
}

/*
 * returns the index of the page with the lowest age
 */
int findOldest(){
	node_t * temp = head;
	int smallest = INT_MAX;
	int smallestInd = -1;
	while(temp != NULL){
		if(temp->ageFifo < smallest){
			smallest = temp->ageFifo;
			smallestInd = temp->index;
		}
		temp = temp->next;
	}
	return smallestInd;
}

/*
 * function removes a page and inserts value at the page removed
 * takes in a page and frame adjustment mode
 */
void fifo(unsigned int value, int mode){
	if(mode == 0){ //normal page in and out
		node_t * temp = head;
		int smallest = findOldest();
		while(temp != NULL){
			if(temp->index == smallest){
				temp->val = value;
				temp->ageFifo = globalAge;
				return;
			}
			temp = temp->next;
		}
	}

	if(mode == 1){ //need more frames
		//add a frame to physical memory and store page there
		numberFrames++;
		node_t * temp = newNode();
		temp->index = ++ID;
		temp->previous = tail;
		tail->next = temp;
		tail = temp;
		insertPage(value);
		return;
	}

	if(mode == 2){ //less frames
		//remove a frame from physical memory
		numberFrames--;
		node_t * temp = head;
		int smallest = findOldest();
		while(temp != NULL){
			if(temp->index == smallest){ //first out is found
				//remove first out frame
				if(head == temp){//if first out is head
					temp->next->previous = NULL;
					head = temp->next;
					free(temp);
					break;
				}
				if(tail == temp){
					temp->previous->next = NULL;
					tail = temp->previous;
					free(temp);
					break;
				}else{
					temp->previous->next = temp->next;
					temp->next->previous = temp->previous;
					free(temp);
					break;
				}
			}
			temp = temp->next;
		}
		usedFrames--;
		temp = head;
		smallest = findOldest();
		while(temp != NULL){
			if(temp->index == smallest){
				temp->val = value;
				temp->ageFifo = globalAge;
				return;
			}
			temp = temp->next;
		}
	}
}//end of FIFO()

/*
 * returns the reference of the least recently used frame
 */
node_t * findLRU(){
	node_t * temp = head;
	int smallest = INT_MAX;
	node_t * small = NULL;
	while(temp!=NULL){
		if(temp->ageLRU < smallest){
			smallest = temp->ageLRU;
			small = temp;
		}
		temp = temp->next;
	}
	return small;
}

void lru(unsigned int value, int mode){
	if(mode == 0){ //PFF within bounds
		node_t * small = findLRU();
		small->val = value;
		small->ageLRU = globalAge;
		return;
	}

	if(mode == 1){ //more frames needed
		numberFrames++;
		node_t *temp = newNode();
		temp->index = ++ID;
		temp->ageLRU = globalAge;
		temp->previous = tail;
		tail->next = temp;
		tail = temp;
		insertPage(value);
		return;
	}

	if(mode == 2){ //less frames are needed
		numberFrames--;
		node_t * temp = findLRU(); //we want to remove the frame with the LRU
		if(temp == head){
			temp->next->previous = NULL;
			head = temp->next;
			free(temp);
		}else if(temp == tail){
			temp->previous->next = NULL;
			tail = temp->previous;
			free(temp);
		}else{
			temp->previous->next = temp->next;
			temp->next->previous = temp->previous;
			free(temp);
		}
		usedFrames--;
		temp = findLRU();
		temp->val = value;
		temp->ageLRU = globalAge;
	}
}

void initOpt(){
	optArray = (int *)malloc(1*sizeof(int));
}

/*
 * method to find page to evict from frame using Optimal page replacement algorithm.
 * First checks to find if there is a page in memory that will never be referenced again,
 * then if there isn't, it checks with the farthest pages against the pages in memory trying to find a match.
 * returns the frame with the page to evict.
 */
node_t * findOptimal(){
	node_t * temp = head;
	node_t * found = NULL;
	int i;
	while(temp!=NULL){
		for(i=counter; i<globalAge; i++){
			if(optArray[i] == temp->val){ //if the page in memory will be referenced in the future
				break;
			}
			return temp; //no future references of the page in memory found
		}
		puts("Reaches here");
		temp = temp->next;
	}
	counter++;
	return NULL;
}

void optimal(unsigned int value, int mode){
	if(mode == 0){ //PFF within bounds
		node_t * victim = findOptimal();
	}
}

void memManagement(unsigned int value){
	if(checkInMem(value)==1){ //if page is already in memory
		return;
	}

	if(usedFrames < numberFrames){ //if there is a free frame
		insertPage(value);
		return;
	}else{ //there is no free frame, a frame will need to be swapped out
		pageFault++;

		int check = 3;
		check = checkBounds(); //check if PFF is within bounds

		if(check == 0){ //PFF is within bounds
			//use a page replacement algorithm to swap a page out
			if(algorithm == 0){
				fifo(value, 0);
			}else if(algorithm == 1){
				lru(value, 0);
			}else{
				optimal(value, 0);
			}
			return;
		}

		if(check == 1){ //PFF is higher than high bound
			if(algorithm == 0){
				fifo(value, 1);
			}else if(algorithm == 1){
				lru(value, 1);
			}else{
				optimal(value, 1);
			}
			printf("Input line %d: n=%d\n", (int)globalAge, numberFrames);
			return;
		}

		if(check == 2){ //PFF is lower than low bound
			if(algorithm == 0){
				fifo(value, 2);
			}else if(algorithm == 1){
				lru(value, 2);
			}else{
				optimal(value, 2);
			}
			printf("Input line %d: n=%d\n", (int)globalAge, numberFrames);
			return;
		}
	}
	return;
}


int main(int argc, char ** argv){
	if(argc != 8){
		printf("Invalid command line arguments\n");
		return 0;
	}
	char alg;
	sscanf(&argv[1][2], "%c", &alg); //scan the algorithm character
	if((alg == 'f')||(alg == 'F')){
		algorithm = 0; //FIFO
	}else if((alg == 'l')||(alg == 'L')){
		algorithm = 1; //LRU
	}else if((alg == 'o')||(alg == 'O')){
		algorithm = 2; //Optimal
	}else{
		printf("Invalid algorithm type\n");
		return 0;
	}
	sscanf(&argv[3][0], "%d", &numberFrames); //scan the number of frames
	if(numberFrames < 0){
		printf("Invalid number of frames\n");
		return 0;
	}
	sscanf(&argv[5][0], "%lf", &lowFreq); //scan the reciprocal of the low frequency
	lowFreq = (1/lowFreq); //turn to the actual frequency
	sscanf(&argv[7][0], "%lf", &highFreq); //scan the reciprocal of the high frequency
	highFreq = (1/highFreq); //turn to actual frequency

	printf("Algorithm %d, Frames %d, Low frequency %f, High frequency %f\n", algorithm, numberFrames, lowFreq, highFreq);

	initList();
	if(algorithm == 2){
		initOpt();
	}
	unsigned int value;
	while(scanf("%d ", &value)!=EOF){
		globalAge++;
		//printf("input value = %d, current age = %d, current page fault = %d, used frames:%d\n", value, (int)globalAge, (int)pageFault, usedFrames);
		if((algorithm == 0)||(algorithm == 1)){
			memManagement(value);
		}else{
			realloc(optArray, (int)globalAge);
			optArray[((int)globalAge)-1] = value;
		}
	}

	if(algorithm == 2){
		int i;
		for(i=0; i<globalAge; i++){
			memManagement(optArray[i]);
			printf("Value = %d\n", optArray[i]);
		}
	}



	printf("Total number of page faults: %d\n", (int)pageFault);
	printf("Final page fault frequency: %f\n", frequency);
	printf("Final number of frames allocated to process: %d\n", numberFrames);


	node_t * temp = head;
	while(temp!=NULL){
		if(temp->previous != NULL){
			free(temp->previous);
		}
		temp = temp->next;
	}
	free(optArray);
//	free(physMem->array);
//	free(physMem);

	return 0;
}
