/*
 * asgn8.c
 *
 *  Created on: Nov. 18, 2019
 *      Author: Amir David
 */

#include <stdio.h>
#include <stdlib.h>



int algorithm; //the page replacement algorithm the program will use. 0 for FIFO, 1 for LRU, 2 for Optimal
int numberFrames; //the number of frames in physical memory
double lowFreq; //the low frequency of page faults
double highFreq; //the high frequency of page faults
double globalAge = 0; //global counter for the time
int ID = 0;
double pageFault = 0; //counter for page fault
double frequency;

/*
 * Nodes of the linked list represent memory frames
 */
typedef struct node {
    unsigned int val; //value to be stored in the frame
    int empty; //1 if frame is empty, 0 if frame is occupied
    int age; //the age of the page in the frame (used for LRU algorithm)
    int id; //the frame number
    struct node * next; //pointer to next node in the list
    struct node * previous; //pointer to previous node in the list
} node_t;

node_t * head = NULL; //head of the linked list
node_t * tail = NULL; //tail of linked list

node_t * newNode(){
	node_t * temp = (node_t *)malloc(sizeof(node_t));
	temp->age = globalAge;
	temp->empty = 1;
	temp->val = 0;
	temp->next = NULL;
	temp->previous = NULL;
	return temp;
}

/*
 * Function initializes linked list pointed to by head with the number of nodes in numberFrames
 */
void initList(){
	int i = 0;
	for(i=0; i<numberFrames; i++){
		node_t * temp = newNode();
		if(head == NULL){
			head = temp;
			tail = temp;
			temp->id = 0;
		}else{
			tail->next = temp;
			temp->previous = tail;
			tail = temp;
			temp->id = ++ID;
		}
	}
}

/*
 * function puts a page in a frame
 */
void ptof(unsigned int val, int age, node_t * frame){
	frame->age = age;
	frame->empty = 0;
	frame->val = val;
}

/*
 * Queue will be used for FIFO algorithm
 */
struct Queue{
    int front, rear, size;
    int capacity;
    node_t **array;
};

struct Queue * physMem; //queue of frames

/* Constructor function to create a queue with a given capacity.
 * starts with a size of queue as 0
 */
struct Queue *createQueue(int capacity){
    struct Queue *queue = (struct Queue*) malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;
    queue->array = (node_t**) malloc((queue->capacity) * sizeof(node_t *));
    return queue;
}

// Queue is full when size becomes equal to the capacity
int isFull(struct Queue *queue){
	return (queue->size == queue->capacity);
}

// Queue is empty when size is 0
int isEmpty(struct Queue *queue){
  if(queue==NULL){
    return -1;
  }
  return (queue->size == 0);
}

/* Function to add an item to the queue.
 * changes rear and size
 */
int enqueue(struct Queue *queue, node_t * item){
    if (isFull(queue)){
        return -1;
    }
    queue->rear = (queue->rear + 1)%queue->capacity;
    queue->array[queue->rear] = item;
    queue->size = (queue->size) + 1;
    printf("enqueued item: %u, at position %d\n", item->val, physMem->rear);
    return 1;
}

/* Function to remove an item from queue.
 * changes front and size
 */
void dequeue(struct Queue *queue){
	if(queue==NULL){
		return;
	}
    if (isEmpty(queue)){
        return;
    }
    unsigned int item = queue->array[queue->front]->val;
    queue->front = (queue->front + 1)%queue->capacity;
    queue->size = (queue->size) - 1;
    printf("dequeued item: %u\n", item);
}

/*
 * Method to check if adjustment of physical memory is needed because of page fault frequency
 * Returns 1 if more frames are needed (PFF is higher than higher bound).
 * Returns -1 if less frames are needed (PFF is less than lower bound).
 * Returns 0 if no frame needs to be adjusted (PFF is between bounds).
 */
int frameAdjust(){
	frequency = (pageFault/globalAge);
	if((frequency <= highFreq)&&(frequency >= lowFreq)){
		return 0;
	}
	if(frequency > highFreq){
		return 1;
	}
	if (frequency < lowFreq){
		return -1;
	}

	return 0;

}

/*
 * checks if the value is in the queue.
 * Returns 1 if it is and 0 if not
 */
int checkInMemory(unsigned int value){
	int i;
	printf("frames=%d, capacity=%d, size=%d\n", numberFrames, physMem->capacity, physMem->size);
	if(physMem->size == 0){ //queue (physical memory) is empty
		return 0;
	}
	for(i=(physMem->front); i<(physMem->size); i++){
		if(physMem->array[i]!=NULL){
			if(physMem->array[i]->val == value){ //if page is found in memory
				return 1;
			}
		}
	}

	return 0;
}

/*
 * Traverses linked list (physical memory) finds the first instance of a free frame and stores the page there
 */
void fifo(unsigned int value){
	int test1, test2;
	test1 = checkInMemory(value); //check if page is loaded in memory
	if(test1 == 1){ //page is already in memory
		return;
	}

	if(test1 == 0){ //page is not loaded in memory
		node_t * newPage = newNode(); //create a new page
		newPage->empty = 0;
		newPage->val = value;
		if(!isFull(physMem)){
			enqueue(physMem, newPage);
			return;
		}else{
			pageFault++; //page fault
			test2 = frameAdjust(); //check page fault frequency

			if(test2==1){ //if more frames are needed
				printf("Need more, Frequency: %f, age: %f\n", frequency, globalAge);
				physMem->capacity = physMem->capacity+1; //add a frame to physical memory
				numberFrames++;
				physMem->array = realloc(physMem->array, numberFrames); //resize array
				physMem->array[numberFrames-1] = newPage; //load page into the new frame
				physMem->size = (physMem->size) + 1; //increase size of queue by 1
				printf("Input line %f: n = %d\n", globalAge, numberFrames);
			}else if(test2==-1){ //if less frames are needed
				printf("LESS, Frequency: %f, age: %f\n", frequency, globalAge);
				physMem->capacity = physMem->capacity-1; //remove a frame from memory
				numberFrames--;
				physMem->size = (physMem->size)-1; //reduce the size of the queue by 1 as an element is gone
				realloc(physMem->array, numberFrames); //reallocate memory for array
				dequeue(physMem); //remove a page from physical memory
				enqueue(physMem, newPage); //insert the new page into physical memory
				printf("Input line %f: n = %d\n", globalAge, numberFrames);
			}else{ //normal frequency
				if(enqueue(physMem, newPage)==-1){
					dequeue(physMem);
					enqueue(physMem, newPage);
					printf("Normal, capacity = %d, size = %d, frames = %d\n", physMem->capacity, physMem->size, numberFrames);
				}
			}
		}

	}
}

void lru(unsigned int value){

}

void optimal(){

}


int main(int argc, char ** argv){
	if(argc != 8){
		printf("Invalid command line arguments\n");
		return 0;
	}
	char alg;
	sscanf(&argv[1][2], "%c", &alg); //scan the algorithm character
	if((alg == 'f')||(alg == 'F')){
		algorithm = 0; //FIFO
	}else if((alg == 'l')||(alg == 'L')){
		algorithm = 1; //LRU
	}else if((alg == 'o')||(alg == 'O')){
		algorithm = 2; //Optimal
	}else{
		printf("Invalid algorithm type\n");
		return 0;
	}
	sscanf(&argv[3][0], "%d", &numberFrames); //scan the number of frames
	if(numberFrames < 0){
		printf("Invalid number of frames\n");
		return 0;
	}
	sscanf(&argv[5][0], "%lf", &lowFreq); //scan the reciprocal of the low frequency
	lowFreq = (1/lowFreq); //turn to the actual frequency
	sscanf(&argv[7][0], "%lf", &highFreq); //scan the reciprocal of the high frequency
	highFreq = (1/highFreq); //turn to actual frequency

	printf("Algorithm %d, Frames %d, Low frequency %f, High frequency %f\n", algorithm, numberFrames, lowFreq, highFreq);

	initList();
	physMem = createQueue(numberFrames);
	unsigned int value;
	while(scanf("%d ", &value)!=EOF){
		globalAge++;
		printf("input value = %d, current age = %f, current page fault = %f\n", value, globalAge, pageFault);
		if(algorithm == 0){
			fifo(value);
		}else if(algorithm == 1){
			lru(value);
		}else{
			optimal(value);
		}
	}
	/*printf("ID of head node (should be 0...): %d\n", head->id);
	printf("ID of 2nd node (should be 1...): %d\n", head->next->id);
	printf("ID of 2nd node: %d\n", head->next->next->previous->id);
	printf("ID of tail node (should be 9...): %d\n", tail->id);
	printf("%p, %p\n", tail->next, head->previous);*/

	node_t * temp = head;
	while(temp!=NULL){
		if(temp->previous != NULL){
			free(temp->previous);
		}
		temp = temp->next;
	}
	free(physMem->array);
	free(physMem);

	return 0;
}
